// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, email, pwd_hash)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
RETURNING id, created_at, updated_at, name, email, pwd_hash
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Email     string
	PwdHash   []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.PwdHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.PwdHash,
	)
	return i, err
}

const userByAuthToken = `-- name: UserByAuthToken :one
SELECT id, created_at, updated_at, name, email, pwd_hash FROM users
WHERE pwd_hash = $1
LIMIT 1
`

func (q *Queries) UserByAuthToken(ctx context.Context, pwdHash []byte) (User, error) {
	row := q.db.QueryRowContext(ctx, userByAuthToken, pwdHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.PwdHash,
	)
	return i, err
}

const userByEmail = `-- name: UserByEmail :one
SELECT id, created_at, updated_at, name, email, pwd_hash FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) UserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.PwdHash,
	)
	return i, err
}
