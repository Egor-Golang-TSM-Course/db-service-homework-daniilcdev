// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const authorizeUser = `-- name: AuthorizeUser :one
SELECT id, created_at, updated_at, name, email, access_token FROM users
WHERE access_token = $1
LIMIT 1
`

func (q *Queries) AuthorizeUser(ctx context.Context, accessToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, authorizeUser, accessToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.AccessToken,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, email, access_token)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
RETURNING id, created_at, updated_at, name, email, access_token
`

type CreateUserParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Email       string
	AccessToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.AccessToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.AccessToken,
	)
	return i, err
}
