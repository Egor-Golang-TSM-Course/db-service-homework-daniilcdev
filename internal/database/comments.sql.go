// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO post_comments (id, created_at, post_text, user_id, post_id)
VALUES (
        DEFAULT,
        $1,
        $2,
        $3,
        $4
    )
RETURNING id, created_at, post_text, user_id, post_id
`

type CreateCommentParams struct {
	CreatedAt time.Time
	PostText  string
	UserID    uuid.UUID
	PostID    int32
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (PostComment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.CreatedAt,
		arg.PostText,
		arg.UserID,
		arg.PostID,
	)
	var i PostComment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.PostText,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const getPostComments = `-- name: GetPostComments :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.content, posts.user_id FROM posts
JOIN post_comments ON posts.id == post_comments.post_id
WHERE posts.id == $1
ORDER BY posts.created_at DESC
LIMIT $2
`

type GetPostCommentsParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) GetPostComments(ctx context.Context, arg GetPostCommentsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostComments, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
