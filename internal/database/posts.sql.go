// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, content, user_id)
VALUES (
        DEFAULT,
        NOW(),
        NOW(),
        $1,
        $2,
        $3
    )
RETURNING id, created_at, updated_at, title, content, user_id, tags
`

type CreatePostParams struct {
	Title   string
	Content sql.NullString
	UserID  uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content, arg.UserID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1 AND user_id = $2
`

type DeletePostParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.db.ExecContext(ctx, deletePost, arg.ID, arg.UserID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, updated_at, title, content, user_id, tags
FROM posts
WHERE posts.id = $1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, created_at, updated_at, title, content, user_id, tags FROM posts
ORDER BY posts.created_at DESC
OFFSET $1
LIMIT $2
`

type GetPostsParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.content, posts.user_id, posts.tags FROM posts
WHERE posts.user_id = $1
ORDER BY posts.created_at DESC
LIMIT $2
`

type GetPostsByUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET updated_at = NOW(),
 title = $3,
 content = $4
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, title, content, user_id, tags
`

type UpdatePostParams struct {
	ID      int32
	UserID  uuid.UUID
	Title   string
	Content sql.NullString
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}

const updatePostContent = `-- name: UpdatePostContent :one
UPDATE posts
SET updated_at = NOW(),
 content = $3
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, title, content, user_id, tags
`

type UpdatePostContentParams struct {
	ID      int32
	UserID  uuid.UUID
	Content sql.NullString
}

func (q *Queries) UpdatePostContent(ctx context.Context, arg UpdatePostContentParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostContent, arg.ID, arg.UserID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}

const updatePostTitle = `-- name: UpdatePostTitle :one
UPDATE posts
SET updated_at = NOW(),
 title = $3
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, title, content, user_id, tags
`

type UpdatePostTitleParams struct {
	ID     int32
	UserID uuid.UUID
	Title  string
}

func (q *Queries) UpdatePostTitle(ctx context.Context, arg UpdatePostTitleParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostTitle, arg.ID, arg.UserID, arg.Title)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}
