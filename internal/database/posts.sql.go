// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, content, user_id)
VALUES (
        DEFAULT,
        $1,
        $2,
        $3,
        $4,
        $5
    )
RETURNING id, created_at, updated_at, title, content, user_id
`

type CreatePostParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Title     string
	Content   sql.NullString
	UserID    uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Content,
		arg.UserID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.content, posts.user_id FROM posts
JOIN post_tags ON post_tags.post_id == posts.id
WHERE posts.user_id = $1
ORDER BY posts.created_at DESC
LIMIT $2
`

type GetPostsByUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Content,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
