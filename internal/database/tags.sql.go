// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addTag = `-- name: AddTag :exec
INSERT INTO tags (id, tag, created_at) 
VALUES (DEFAULT, UNNEST($1), NOW()) ON CONFLICT DO NOTHING
`

func (q *Queries) AddTag(ctx context.Context, unnest interface{}) error {
	_, err := q.db.ExecContext(ctx, addTag, unnest)
	return err
}

const allTags = `-- name: AllTags :many
SELECT id, tag, created_at FROM tags
LIMIT $1
`

func (q *Queries) AllTags(ctx context.Context, limit int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, allTags, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Tag, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostTags = `-- name: UpdatePostTags :one
UPDATE posts
SET tags = $3,
    updated_at = NOW()
WHERE posts.id = $1 AND posts.user_id = $2
RETURNING id, created_at, updated_at, title, content, user_id, tags
`

type UpdatePostTagsParams struct {
	ID     int32
	UserID uuid.UUID
	Tags   []string
}

func (q *Queries) UpdatePostTags(ctx context.Context, arg UpdatePostTagsParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostTags, arg.ID, arg.UserID, pq.Array(arg.Tags))
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Content,
		&i.UserID,
		pq.Array(&i.Tags),
	)
	return i, err
}
